library(twitteR)
library(ROAuth)
library(RCurl)
library(wordcloud)
library(RColorBrewer)
library(plyr)
library(ggplot2)
library(sentiment)
library(httr)
library(bitops)
api_key<-"ep6BcrmmsPR2JeN9gv0PL8xUd"
api_secret<-"ptjt7ZU0uGD4q8hUb02yEfk24JLHk4ACHbpI842wFyK8TXKnvr"
access_token<-"569237729-RZFn1M08xfpoIyDfZmDTkr8eZHOeThUijG99hFQr"
access_token_secret<-"6r4SgY1xdc7obpOHWZYNJuidMdKYDEJsJuDUD3ITYHMvd"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
bjp_tweets = searchTwitter("BJP", n=500, lang="en")
bjp_txt = sapply(bjp_tweets, function(x) x$getText())
bjp_txt = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", bjp_txt)
bjp_txt = gsub("@\\w+", "", bjp_txt)
# Then remove all the punctuation
 bjp_txt = gsub("[[:punct:]]", "", bjp_txt)
# Then remove numbers, we need only text for analytics
 bjp_txt = gsub("[[:digit:]]", "", bjp_txt)
# the remove html links, which are not required for sentiment analysis
 bjp_txt = gsub("http\\w+", "", bjp_txt)
# finally, we remove unnecessary spaces (white spaces, tabs etc)
 bjp_txt = gsub("[ \t]{2,}", "", bjp_txt)
 bjp_txt = gsub("^\\s+|\\s+$", "", bjp_txt)
# Let us first define a function which can handle tolower error handling, if arises any, during converting all words in lower case.
try.error = function(x)
{
   # create missing value
   y = NA
   # tryCatch error
   try_error = tryCatch(tolower(x), error=function(e) e)
   # if not an error
   if (!inherits(try_error, "error"))
   y = tolower(x)
   # result
   return(y)
}

# Now we will transform all the words in lower case using catch.error function we just created above and with sapply function
bjp_txt = sapply(bjp_txt, try.error)



# Also we will remove NAs, if any exists, from bjp_txt (the collected and refined text in analysis)
bjp_txt = bjp_txt[!is.na(bjp_txt)]

# also remove names (column headings) from the text, as we do not want them in the sentiment analysis
names(bjp_txt) = NULL

# Now the text is fully prepared (or at least for this tutorial) and we are good to go to perform Sentiment Analysis using this text

# As a first step in this stage, let us first classify emotions
# In this tutorial we will be using Bayes algorithm to classify emotion categories
# for more please see help on classify_emotion (?classify_emotion) under sentiment package
bjp_class_emo = classify_emotion(bjp_txt, algorithm="bayes", prior=1.0)
# the above function returns an of bject of class data.frame with seven columns (anger, disgust, fear, joy, sadness, surprise, best_fit) and one row for each document:

# we will fetch emotion category best_fit for our analysis purposes, visitors to this tutorials are encouraged to play around with other classifications as well.
emotion = bjp_class_emo[,7]

# Replace NAs (if any, generated during classification process) by word unknown
# There are chances that classification process generates NAs. This is because, sentiment package uses an in-built dataset emotions, which containing approximately 1500 words classified into six emotion categories: anger, disgust, fear, joy, sadness, and surprise
# If any words outside this dataset are given, the process will term the words as NAs
emotion[is.na(emotion)] = "unknown"

# Similar to above, we will classify polarity in the text
# This process will classify the text data into four categories (pos  The absolute log likelihood of the document expressing a positive sentiment, neg  The absolute log likelihood of the document expressing a negative sentimen, pos/neg   The ratio of absolute log likelihoods between positive and negative sentiment scores where a score of 1 indicates a neutral sentiment, less than 1 indicates a negative sentiment, and greater than 1 indicates a positive sentiment; AND best_fit  The most likely sentiment category (e.g. positive, negative, neutral) for the given text)

bjp_class_pol = classify_polarity(bjp_txt, algorithm="bayes")

# we will fetch polarity category best_fit for our analysis purposes, and as usual, visitors to this tutorials are encouraged to play around with other classifications as well
polarity = bjp_class_pol[,4]

# Let us now create a data frame with the above results obtained and rearrange data for plotting purposes
# creating data frame using emotion category and polarity results earlier obtained
sentiment_dataframe = data.frame(text=bjp_txt, emotion=emotion, polarity=polarity, stringsAsFactors=FALSE)

# rearrange data inside the frame by sorting it
sentiment_dataframe = within(sentiment_dataframe, emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))

# In the next step we will plot the obtained results (in data frame)

# First let us plot the distribution of emotions according to emotion categories
# We will use ggplot function from ggplot2 Package (for more look at the help on ggplot) and RColorBrewer Package
ggplot(sentiment_dataframe, aes(x=emotion)) + 
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
ggtitle('Sentiment Analysis of Tweets on Twitter about BJP') +
theme(legend.position='right') + 
labs(x="polarity categories", y="number of tweets") 

ggplot(sentiment_dataframe, aes(x=polarity)) +
geom_bar(aes(y=..count.., fill=polarity)) +
scale_fill_brewer(palette="RdGy") +
ggtitle('Sentiment Analysis of Tweets on Twitter about BJP') +
theme(legend.position='right') +
labs(x="polarity categories", y="number of tweets") 
# First, separate the words according to emotions
bjp_emos = levels(factor(sentiment_dataframe$emotion))
n_bjp_emos = length(bjp_emos)
bjp.emo.docs = rep("", n_bjp_emos)
for (i in 1:n_bjp_emos)
{
tmp = bjp_txt[emotion == bjp_emos[i]]
bjp.emo.docs[i] = paste(tmp, collapse="")
}
bjp.emo.docs = removeWords(bjp.emo.docs, stopwords("english"))
bjp.corpus = Corpus(VectorSource(bjp.emo.docs))
bjp.tdm = TermDocumentMatrix(bjp.corpus)
bjp.tdm = as.matrix(bjp.tdm)
colnames(bjp.tdm) = bjp_emos
# creating, comparing and plotting the words on the cloud
comparison.cloud(bjp.tdm, colors = brewer.pal(n_bjp_emos, "Dark2"),scale = c(3,.5), random.order = FALSE, title.size = 1.5)



